import{n as f,q as c,l as T}from"./index-f2c8bc83.js";import{c as h}from"./ProjectStore-fa9cd6af.js";var d={exports:{}},g="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED",m=g,w=m;function k(){}function u(){}u.resetWarningCache=k;var R=function(){function e(a,t,o,p,l,y){if(y!==w){var i=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw i.name="Invariant Violation",i}}e.isRequired=e;function r(){return e}var s={array:e,bigint:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:r,element:e,elementType:e,instanceOf:r,node:e,objectOf:r,oneOf:r,oneOfType:r,shape:r,exact:r,checkPropTypes:u,resetWarningCache:k};return s.PropTypes=s,s};d.exports=R();var P=d.exports;const S=f(P),n="https://ontrackbackendapi2.azurewebsites.net/api",v=h((e,r)=>({tasks:[],loading:!1,error:null,getTaskById:s=>r().tasks.find(a=>a.id===s),fetchTasks:async()=>{e({loading:!0,error:null});try{const s=await c.get(`${n}/task`);e({tasks:s.data,loading:!1}),console.log("Tasks fetched successfully")}catch(s){console.error("Failed to fetch tasks:",s),e({loading:!1,error:"Nie udało się wyświetlić zadań. Spróbuj ponownie później"})}},fetchUserTasks:async()=>{e({loading:!0,error:null});try{const a=(await T.get(`${n}/user/me`)).data.taskIds;if(console.log("User Task IDs:",a),a&&a.length>0){const p=(await c.get(`${n}/task`)).data.filter(l=>a.includes(l.id));e({tasks:p,loading:!1}),console.log("User tasks fetched successfully:",p)}else e({tasks:[],loading:!1}),console.log("No tasks found for user.")}catch(s){console.error("Failed to fetch user tasks:",s),e({loading:!1,error:"Failed to fetch user tasks. Please try again later."})}},addTask:async s=>{try{const t=(await c.post(`${n}/task`,s)).data;e(o=>({tasks:[...o.tasks,t]}))}catch(a){console.error("Failed to add task:",a)}},updateTask:async(s,a)=>{try{await c.put(`${n}/task`,a),e(t=>({tasks:t.tasks.map(o=>o.id===s?{...o,...a}:o)}))}catch(t){console.error("Failed to update task:",t)}},deleteTask:async s=>{try{await c.delete(`${n}/task/${s}`),e(a=>({tasks:a.tasks.filter(t=>t.id!==s)}))}catch(a){console.error("Failed to delete task:",a)}}}));export{S as P,P as p,v as u};
