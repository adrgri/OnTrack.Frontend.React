import{n as h,q as i,l}from"./index-c79e8087.js";import{c as T}from"./ProjectStore-0ec5223f.js";var u={exports:{}},g="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED",m=g,w=m;function y(){}function f(){}f.resetWarningCache=y;var R=function(){function e(a,t,r,d,p,c){if(c!==w){var k=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw k.name="Invariant Violation",k}}e.isRequired=e;function o(){return e}var s={array:e,bigint:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:o,element:e,elementType:e,instanceOf:o,node:e,objectOf:o,oneOf:o,oneOfType:o,shape:o,exact:o,checkPropTypes:f,resetWarningCache:y};return s.PropTypes=s,s};u.exports=R();var b=u.exports;const $=h(b),n="https://ontrackbackendapi2.azurewebsites.net/api",v=T((e,o)=>({tasks:[],loading:!1,error:null,getTaskById:s=>o().tasks.find(a=>a.id===s),fetchTasks:async()=>{e({loading:!0,error:null});try{const s=await i.get(`${n}/task`);e({tasks:s.data,loading:!1}),console.log("Tasks fetched successfully")}catch(s){console.error("Failed to fetch tasks:",s),e({loading:!1,error:"Nie udało się wyświetlić zadań. Spróbuj ponownie później"})}},fetchUserTasks:async s=>{e({loading:!0,error:null});try{const t=(await l.get(`${n}/user/me`)).data.taskIds;let r=[];if(s){const p=(await l.get(`${n}/project/${s}`)).data.map(c=>c.taskIds);p.length>0&&(r=(await l.get(`${n}/task/${p}`)).data)}else t.length>0&&(r=(await l.get(`${n}/task`)).data.filter(p=>t.includes(p.id)));e({tasks:r,loading:!1}),console.log("Tasks fetched successfully")}catch(a){console.error("Failed to fetch tasks:",a),e({loading:!1,error:"Nie udało się wyświetlić zadań. Spróbuj ponownie później"})}},addTask:async s=>{try{const t=(await i.post(`${n}/task`,s)).data;e(r=>({tasks:[...r.tasks,t]}))}catch(a){console.error("Failed to add task:",a)}},updateTask:async(s,a)=>{try{await i.put(`${n}/task`,a),e(t=>({tasks:t.tasks.map(r=>r.id===s?{...r,...a}:r)}))}catch(t){console.error("Failed to update task:",t)}},deleteTask:async s=>{try{await i.delete(`${n}/task/${s}`),e(a=>({tasks:a.tasks.filter(t=>t.id!==s)}))}catch(a){console.error("Failed to delete task:",a)}}}));export{$ as P,b as p,v as u};
